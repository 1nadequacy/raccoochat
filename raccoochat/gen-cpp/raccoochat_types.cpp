/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "raccoochat_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace raccoochat {


UserData::~UserData() throw() {
}


void UserData::__set_userName(const std::string& val) {
  this->userName = val;
}

void UserData::__set_userPassword(const std::string& val) {
  this->userPassword = val;
}

void UserData::__set_status(const int32_t val) {
  this->status = val;
}

void UserData::__set_messagesId(const int32_t val) {
  this->messagesId = val;
}

void UserData::__set_privateMessagesId(const int32_t val) {
  this->privateMessagesId = val;
}

uint32_t UserData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userName);
          this->__isset.userName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userPassword);
          this->__isset.userPassword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->messagesId);
          this->__isset.messagesId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->privateMessagesId);
          this->__isset.privateMessagesId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UserData");

  xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->userName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userPassword", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userPassword);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("messagesId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->messagesId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("privateMessagesId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->privateMessagesId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserData &a, UserData &b) {
  using ::std::swap;
  swap(a.userName, b.userName);
  swap(a.userPassword, b.userPassword);
  swap(a.status, b.status);
  swap(a.messagesId, b.messagesId);
  swap(a.privateMessagesId, b.privateMessagesId);
  swap(a.__isset, b.__isset);
}

UserData::UserData(const UserData& other0) {
  userName = other0.userName;
  userPassword = other0.userPassword;
  status = other0.status;
  messagesId = other0.messagesId;
  privateMessagesId = other0.privateMessagesId;
  __isset = other0.__isset;
}
UserData& UserData::operator=(const UserData& other1) {
  userName = other1.userName;
  userPassword = other1.userPassword;
  status = other1.status;
  messagesId = other1.messagesId;
  privateMessagesId = other1.privateMessagesId;
  __isset = other1.__isset;
  return *this;
}
void UserData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UserData(";
  out << "userName=" << to_string(userName);
  out << ", " << "userPassword=" << to_string(userPassword);
  out << ", " << "status=" << to_string(status);
  out << ", " << "messagesId=" << to_string(messagesId);
  out << ", " << "privateMessagesId=" << to_string(privateMessagesId);
  out << ")";
}


Message::~Message() throw() {
}


void Message::__set_sendingTime(const std::string& val) {
  this->sendingTime = val;
}

void Message::__set_userId(const int32_t val) {
  this->userId = val;
}

void Message::__set_textMessage(const std::string& val) {
  this->textMessage = val;
}

uint32_t Message::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sendingTime);
          this->__isset.sendingTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userId);
          this->__isset.userId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->textMessage);
          this->__isset.textMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Message");

  xfer += oprot->writeFieldBegin("sendingTime", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sendingTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->userId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("textMessage", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->textMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Message &a, Message &b) {
  using ::std::swap;
  swap(a.sendingTime, b.sendingTime);
  swap(a.userId, b.userId);
  swap(a.textMessage, b.textMessage);
  swap(a.__isset, b.__isset);
}

Message::Message(const Message& other2) {
  sendingTime = other2.sendingTime;
  userId = other2.userId;
  textMessage = other2.textMessage;
  __isset = other2.__isset;
}
Message& Message::operator=(const Message& other3) {
  sendingTime = other3.sendingTime;
  userId = other3.userId;
  textMessage = other3.textMessage;
  __isset = other3.__isset;
  return *this;
}
void Message::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Message(";
  out << "sendingTime=" << to_string(sendingTime);
  out << ", " << "userId=" << to_string(userId);
  out << ", " << "textMessage=" << to_string(textMessage);
  out << ")";
}


InvalidNameException::~InvalidNameException() throw() {
}


void InvalidNameException::__set_errorCode(const int32_t val) {
  this->errorCode = val;
}

void InvalidNameException::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
}

uint32_t InvalidNameException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMessage);
          this->__isset.errorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidNameException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("InvalidNameException");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errorMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidNameException &a, InvalidNameException &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.errorMessage, b.errorMessage);
  swap(a.__isset, b.__isset);
}

InvalidNameException::InvalidNameException(const InvalidNameException& other4) : TException() {
  errorCode = other4.errorCode;
  errorMessage = other4.errorMessage;
  __isset = other4.__isset;
}
InvalidNameException& InvalidNameException::operator=(const InvalidNameException& other5) {
  errorCode = other5.errorCode;
  errorMessage = other5.errorMessage;
  __isset = other5.__isset;
  return *this;
}
void InvalidNameException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "InvalidNameException(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "errorMessage=" << to_string(errorMessage);
  out << ")";
}

const char* InvalidNameException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: InvalidNameException";
  }
}

} // namespace
