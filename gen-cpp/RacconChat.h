/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RacconChat_H
#define RacconChat_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "tutorial_types.h"

namespace tutorial {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RacconChatIf {
 public:
  virtual ~RacconChatIf() {}
  virtual bool connectUser(const std::string& user) = 0;
  virtual void disconnectUser(const std::string& user) = 0;
  virtual void getAllOnlineUsers(std::map<std::string, int32_t> & _return) = 0;
  virtual void getNewMessages(std::vector<Message> & _return, const std::string& user) = 0;
  virtual void getLastFiveMessages(std::vector<Message> & _return) = 0;
  virtual void addMessage(const Message& msg) = 0;
};

class RacconChatIfFactory {
 public:
  typedef RacconChatIf Handler;

  virtual ~RacconChatIfFactory() {}

  virtual RacconChatIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RacconChatIf* /* handler */) = 0;
};

class RacconChatIfSingletonFactory : virtual public RacconChatIfFactory {
 public:
  RacconChatIfSingletonFactory(const boost::shared_ptr<RacconChatIf>& iface) : iface_(iface) {}
  virtual ~RacconChatIfSingletonFactory() {}

  virtual RacconChatIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RacconChatIf* /* handler */) {}

 protected:
  boost::shared_ptr<RacconChatIf> iface_;
};

class RacconChatNull : virtual public RacconChatIf {
 public:
  virtual ~RacconChatNull() {}
  bool connectUser(const std::string& /* user */) {
    bool _return = false;
    return _return;
  }
  void disconnectUser(const std::string& /* user */) {
    return;
  }
  void getAllOnlineUsers(std::map<std::string, int32_t> & /* _return */) {
    return;
  }
  void getNewMessages(std::vector<Message> & /* _return */, const std::string& /* user */) {
    return;
  }
  void getLastFiveMessages(std::vector<Message> & /* _return */) {
    return;
  }
  void addMessage(const Message& /* msg */) {
    return;
  }
};

typedef struct _RacconChat_connectUser_args__isset {
  _RacconChat_connectUser_args__isset() : user(false) {}
  bool user :1;
} _RacconChat_connectUser_args__isset;

class RacconChat_connectUser_args {
 public:

  RacconChat_connectUser_args(const RacconChat_connectUser_args&);
  RacconChat_connectUser_args& operator=(const RacconChat_connectUser_args&);
  RacconChat_connectUser_args() : user() {
  }

  virtual ~RacconChat_connectUser_args() throw();
  std::string user;

  _RacconChat_connectUser_args__isset __isset;

  void __set_user(const std::string& val);

  bool operator == (const RacconChat_connectUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const RacconChat_connectUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_connectUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RacconChat_connectUser_pargs {
 public:


  virtual ~RacconChat_connectUser_pargs() throw();
  const std::string* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_connectUser_result__isset {
  _RacconChat_connectUser_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RacconChat_connectUser_result__isset;

class RacconChat_connectUser_result {
 public:

  RacconChat_connectUser_result(const RacconChat_connectUser_result&);
  RacconChat_connectUser_result& operator=(const RacconChat_connectUser_result&);
  RacconChat_connectUser_result() : success(0) {
  }

  virtual ~RacconChat_connectUser_result() throw();
  bool success;
  InvalidValueException e;

  _RacconChat_connectUser_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const InvalidValueException& val);

  bool operator == (const RacconChat_connectUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RacconChat_connectUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_connectUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_connectUser_presult__isset {
  _RacconChat_connectUser_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RacconChat_connectUser_presult__isset;

class RacconChat_connectUser_presult {
 public:


  virtual ~RacconChat_connectUser_presult() throw();
  bool* success;
  InvalidValueException e;

  _RacconChat_connectUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RacconChat_disconnectUser_args__isset {
  _RacconChat_disconnectUser_args__isset() : user(false) {}
  bool user :1;
} _RacconChat_disconnectUser_args__isset;

class RacconChat_disconnectUser_args {
 public:

  RacconChat_disconnectUser_args(const RacconChat_disconnectUser_args&);
  RacconChat_disconnectUser_args& operator=(const RacconChat_disconnectUser_args&);
  RacconChat_disconnectUser_args() : user() {
  }

  virtual ~RacconChat_disconnectUser_args() throw();
  std::string user;

  _RacconChat_disconnectUser_args__isset __isset;

  void __set_user(const std::string& val);

  bool operator == (const RacconChat_disconnectUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const RacconChat_disconnectUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_disconnectUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RacconChat_disconnectUser_pargs {
 public:


  virtual ~RacconChat_disconnectUser_pargs() throw();
  const std::string* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_disconnectUser_result__isset {
  _RacconChat_disconnectUser_result__isset() : e(false) {}
  bool e :1;
} _RacconChat_disconnectUser_result__isset;

class RacconChat_disconnectUser_result {
 public:

  RacconChat_disconnectUser_result(const RacconChat_disconnectUser_result&);
  RacconChat_disconnectUser_result& operator=(const RacconChat_disconnectUser_result&);
  RacconChat_disconnectUser_result() {
  }

  virtual ~RacconChat_disconnectUser_result() throw();
  InvalidValueException e;

  _RacconChat_disconnectUser_result__isset __isset;

  void __set_e(const InvalidValueException& val);

  bool operator == (const RacconChat_disconnectUser_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RacconChat_disconnectUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_disconnectUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_disconnectUser_presult__isset {
  _RacconChat_disconnectUser_presult__isset() : e(false) {}
  bool e :1;
} _RacconChat_disconnectUser_presult__isset;

class RacconChat_disconnectUser_presult {
 public:


  virtual ~RacconChat_disconnectUser_presult() throw();
  InvalidValueException e;

  _RacconChat_disconnectUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RacconChat_getAllOnlineUsers_args {
 public:

  RacconChat_getAllOnlineUsers_args(const RacconChat_getAllOnlineUsers_args&);
  RacconChat_getAllOnlineUsers_args& operator=(const RacconChat_getAllOnlineUsers_args&);
  RacconChat_getAllOnlineUsers_args() {
  }

  virtual ~RacconChat_getAllOnlineUsers_args() throw();

  bool operator == (const RacconChat_getAllOnlineUsers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RacconChat_getAllOnlineUsers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_getAllOnlineUsers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RacconChat_getAllOnlineUsers_pargs {
 public:


  virtual ~RacconChat_getAllOnlineUsers_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_getAllOnlineUsers_result__isset {
  _RacconChat_getAllOnlineUsers_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RacconChat_getAllOnlineUsers_result__isset;

class RacconChat_getAllOnlineUsers_result {
 public:

  RacconChat_getAllOnlineUsers_result(const RacconChat_getAllOnlineUsers_result&);
  RacconChat_getAllOnlineUsers_result& operator=(const RacconChat_getAllOnlineUsers_result&);
  RacconChat_getAllOnlineUsers_result() {
  }

  virtual ~RacconChat_getAllOnlineUsers_result() throw();
  std::map<std::string, int32_t>  success;
  InvalidValueException e;

  _RacconChat_getAllOnlineUsers_result__isset __isset;

  void __set_success(const std::map<std::string, int32_t> & val);

  void __set_e(const InvalidValueException& val);

  bool operator == (const RacconChat_getAllOnlineUsers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RacconChat_getAllOnlineUsers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_getAllOnlineUsers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_getAllOnlineUsers_presult__isset {
  _RacconChat_getAllOnlineUsers_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RacconChat_getAllOnlineUsers_presult__isset;

class RacconChat_getAllOnlineUsers_presult {
 public:


  virtual ~RacconChat_getAllOnlineUsers_presult() throw();
  std::map<std::string, int32_t> * success;
  InvalidValueException e;

  _RacconChat_getAllOnlineUsers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RacconChat_getNewMessages_args__isset {
  _RacconChat_getNewMessages_args__isset() : user(false) {}
  bool user :1;
} _RacconChat_getNewMessages_args__isset;

class RacconChat_getNewMessages_args {
 public:

  RacconChat_getNewMessages_args(const RacconChat_getNewMessages_args&);
  RacconChat_getNewMessages_args& operator=(const RacconChat_getNewMessages_args&);
  RacconChat_getNewMessages_args() : user() {
  }

  virtual ~RacconChat_getNewMessages_args() throw();
  std::string user;

  _RacconChat_getNewMessages_args__isset __isset;

  void __set_user(const std::string& val);

  bool operator == (const RacconChat_getNewMessages_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const RacconChat_getNewMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_getNewMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RacconChat_getNewMessages_pargs {
 public:


  virtual ~RacconChat_getNewMessages_pargs() throw();
  const std::string* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_getNewMessages_result__isset {
  _RacconChat_getNewMessages_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RacconChat_getNewMessages_result__isset;

class RacconChat_getNewMessages_result {
 public:

  RacconChat_getNewMessages_result(const RacconChat_getNewMessages_result&);
  RacconChat_getNewMessages_result& operator=(const RacconChat_getNewMessages_result&);
  RacconChat_getNewMessages_result() {
  }

  virtual ~RacconChat_getNewMessages_result() throw();
  std::vector<Message>  success;
  InvalidValueException e;

  _RacconChat_getNewMessages_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_e(const InvalidValueException& val);

  bool operator == (const RacconChat_getNewMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RacconChat_getNewMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_getNewMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_getNewMessages_presult__isset {
  _RacconChat_getNewMessages_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RacconChat_getNewMessages_presult__isset;

class RacconChat_getNewMessages_presult {
 public:


  virtual ~RacconChat_getNewMessages_presult() throw();
  std::vector<Message> * success;
  InvalidValueException e;

  _RacconChat_getNewMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RacconChat_getLastFiveMessages_args {
 public:

  RacconChat_getLastFiveMessages_args(const RacconChat_getLastFiveMessages_args&);
  RacconChat_getLastFiveMessages_args& operator=(const RacconChat_getLastFiveMessages_args&);
  RacconChat_getLastFiveMessages_args() {
  }

  virtual ~RacconChat_getLastFiveMessages_args() throw();

  bool operator == (const RacconChat_getLastFiveMessages_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RacconChat_getLastFiveMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_getLastFiveMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RacconChat_getLastFiveMessages_pargs {
 public:


  virtual ~RacconChat_getLastFiveMessages_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_getLastFiveMessages_result__isset {
  _RacconChat_getLastFiveMessages_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RacconChat_getLastFiveMessages_result__isset;

class RacconChat_getLastFiveMessages_result {
 public:

  RacconChat_getLastFiveMessages_result(const RacconChat_getLastFiveMessages_result&);
  RacconChat_getLastFiveMessages_result& operator=(const RacconChat_getLastFiveMessages_result&);
  RacconChat_getLastFiveMessages_result() {
  }

  virtual ~RacconChat_getLastFiveMessages_result() throw();
  std::vector<Message>  success;
  InvalidValueException e;

  _RacconChat_getLastFiveMessages_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  void __set_e(const InvalidValueException& val);

  bool operator == (const RacconChat_getLastFiveMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RacconChat_getLastFiveMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_getLastFiveMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_getLastFiveMessages_presult__isset {
  _RacconChat_getLastFiveMessages_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _RacconChat_getLastFiveMessages_presult__isset;

class RacconChat_getLastFiveMessages_presult {
 public:


  virtual ~RacconChat_getLastFiveMessages_presult() throw();
  std::vector<Message> * success;
  InvalidValueException e;

  _RacconChat_getLastFiveMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RacconChat_addMessage_args__isset {
  _RacconChat_addMessage_args__isset() : msg(false) {}
  bool msg :1;
} _RacconChat_addMessage_args__isset;

class RacconChat_addMessage_args {
 public:

  RacconChat_addMessage_args(const RacconChat_addMessage_args&);
  RacconChat_addMessage_args& operator=(const RacconChat_addMessage_args&);
  RacconChat_addMessage_args() {
  }

  virtual ~RacconChat_addMessage_args() throw();
  Message msg;

  _RacconChat_addMessage_args__isset __isset;

  void __set_msg(const Message& val);

  bool operator == (const RacconChat_addMessage_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const RacconChat_addMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_addMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RacconChat_addMessage_pargs {
 public:


  virtual ~RacconChat_addMessage_pargs() throw();
  const Message* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_addMessage_result__isset {
  _RacconChat_addMessage_result__isset() : e(false) {}
  bool e :1;
} _RacconChat_addMessage_result__isset;

class RacconChat_addMessage_result {
 public:

  RacconChat_addMessage_result(const RacconChat_addMessage_result&);
  RacconChat_addMessage_result& operator=(const RacconChat_addMessage_result&);
  RacconChat_addMessage_result() {
  }

  virtual ~RacconChat_addMessage_result() throw();
  InvalidValueException e;

  _RacconChat_addMessage_result__isset __isset;

  void __set_e(const InvalidValueException& val);

  bool operator == (const RacconChat_addMessage_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RacconChat_addMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RacconChat_addMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RacconChat_addMessage_presult__isset {
  _RacconChat_addMessage_presult__isset() : e(false) {}
  bool e :1;
} _RacconChat_addMessage_presult__isset;

class RacconChat_addMessage_presult {
 public:


  virtual ~RacconChat_addMessage_presult() throw();
  InvalidValueException e;

  _RacconChat_addMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RacconChatClient : virtual public RacconChatIf {
 public:
  RacconChatClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RacconChatClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool connectUser(const std::string& user);
  void send_connectUser(const std::string& user);
  bool recv_connectUser();
  void disconnectUser(const std::string& user);
  void send_disconnectUser(const std::string& user);
  void recv_disconnectUser();
  void getAllOnlineUsers(std::map<std::string, int32_t> & _return);
  void send_getAllOnlineUsers();
  void recv_getAllOnlineUsers(std::map<std::string, int32_t> & _return);
  void getNewMessages(std::vector<Message> & _return, const std::string& user);
  void send_getNewMessages(const std::string& user);
  void recv_getNewMessages(std::vector<Message> & _return);
  void getLastFiveMessages(std::vector<Message> & _return);
  void send_getLastFiveMessages();
  void recv_getLastFiveMessages(std::vector<Message> & _return);
  void addMessage(const Message& msg);
  void send_addMessage(const Message& msg);
  void recv_addMessage();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RacconChatProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RacconChatIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RacconChatProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connectUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnectUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllOnlineUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNewMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLastFiveMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RacconChatProcessor(boost::shared_ptr<RacconChatIf> iface) :
    iface_(iface) {
    processMap_["connectUser"] = &RacconChatProcessor::process_connectUser;
    processMap_["disconnectUser"] = &RacconChatProcessor::process_disconnectUser;
    processMap_["getAllOnlineUsers"] = &RacconChatProcessor::process_getAllOnlineUsers;
    processMap_["getNewMessages"] = &RacconChatProcessor::process_getNewMessages;
    processMap_["getLastFiveMessages"] = &RacconChatProcessor::process_getLastFiveMessages;
    processMap_["addMessage"] = &RacconChatProcessor::process_addMessage;
  }

  virtual ~RacconChatProcessor() {}
};

class RacconChatProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RacconChatProcessorFactory(const ::boost::shared_ptr< RacconChatIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RacconChatIfFactory > handlerFactory_;
};

class RacconChatMultiface : virtual public RacconChatIf {
 public:
  RacconChatMultiface(std::vector<boost::shared_ptr<RacconChatIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RacconChatMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RacconChatIf> > ifaces_;
  RacconChatMultiface() {}
  void add(boost::shared_ptr<RacconChatIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool connectUser(const std::string& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connectUser(user);
    }
    return ifaces_[i]->connectUser(user);
  }

  void disconnectUser(const std::string& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnectUser(user);
    }
    ifaces_[i]->disconnectUser(user);
  }

  void getAllOnlineUsers(std::map<std::string, int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllOnlineUsers(_return);
    }
    ifaces_[i]->getAllOnlineUsers(_return);
    return;
  }

  void getNewMessages(std::vector<Message> & _return, const std::string& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNewMessages(_return, user);
    }
    ifaces_[i]->getNewMessages(_return, user);
    return;
  }

  void getLastFiveMessages(std::vector<Message> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLastFiveMessages(_return);
    }
    ifaces_[i]->getLastFiveMessages(_return);
    return;
  }

  void addMessage(const Message& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addMessage(msg);
    }
    ifaces_[i]->addMessage(msg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RacconChatConcurrentClient : virtual public RacconChatIf {
 public:
  RacconChatConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RacconChatConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool connectUser(const std::string& user);
  int32_t send_connectUser(const std::string& user);
  bool recv_connectUser(const int32_t seqid);
  void disconnectUser(const std::string& user);
  int32_t send_disconnectUser(const std::string& user);
  void recv_disconnectUser(const int32_t seqid);
  void getAllOnlineUsers(std::map<std::string, int32_t> & _return);
  int32_t send_getAllOnlineUsers();
  void recv_getAllOnlineUsers(std::map<std::string, int32_t> & _return, const int32_t seqid);
  void getNewMessages(std::vector<Message> & _return, const std::string& user);
  int32_t send_getNewMessages(const std::string& user);
  void recv_getNewMessages(std::vector<Message> & _return, const int32_t seqid);
  void getLastFiveMessages(std::vector<Message> & _return);
  int32_t send_getLastFiveMessages();
  void recv_getLastFiveMessages(std::vector<Message> & _return, const int32_t seqid);
  void addMessage(const Message& msg);
  int32_t send_addMessage(const Message& msg);
  void recv_addMessage(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
