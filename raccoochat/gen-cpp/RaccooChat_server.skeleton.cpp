// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "RaccooChat.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::raccoochat;

class RaccooChatHandler : virtual public RaccooChatIf {
 public:
  RaccooChatHandler() {
    // Your initialization goes here
  }

  bool findUser(const std::string& name) {
    // Your implementation goes here
    printf("findUser\n");
  }

  bool connectUser(const std::string& name) {
    // Your implementation goes here
    printf("connectUser\n");
  }

  void disconnectUser(const std::string& name) {
    // Your implementation goes here
    printf("disconnectUser\n");
  }

  void getAllOnlineUsers(std::map<std::string, User> & _return) {
    // Your implementation goes here
    printf("getAllOnlineUsers\n");
  }

  void getNewMessages(std::vector<SimpleMessage> & _return, const std::string& name) {
    // Your implementation goes here
    printf("getNewMessages\n");
  }

  void getNewPrivateMessages(std::vector<SimpleMessage> & _return, const std::string& name) {
    // Your implementation goes here
    printf("getNewPrivateMessages\n");
  }

  void getLastFiveMessages(std::vector<SimpleMessage> & _return) {
    // Your implementation goes here
    printf("getLastFiveMessages\n");
  }

  void addMessage(const SimpleMessage& msg) {
    // Your implementation goes here
    printf("addMessage\n");
  }

  void addPrivateMessage(const SimpleMessage& msg, const std::string& name) {
    // Your implementation goes here
    printf("addPrivateMessage\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<RaccooChatHandler> handler(new RaccooChatHandler());
  shared_ptr<TProcessor> processor(new RaccooChatProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

