/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef raccoochat_TYPES_H
#define raccoochat_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace raccoochat {

class User;

class UserData;

class SimpleMessage;

class InvalidNameException;

typedef struct _User__isset {
  _User__isset() : userIndex(false), userPassword(false) {}
  bool userIndex :1;
  bool userPassword :1;
} _User__isset;

class User : public virtual ::apache::thrift::TBase {
 public:

  User(const User&);
  User& operator=(const User&);
  User() : userIndex(0), userPassword() {
  }

  virtual ~User() throw();
  int32_t userIndex;
  std::string userPassword;

  _User__isset __isset;

  void __set_userIndex(const int32_t val);

  void __set_userPassword(const std::string& val);

  bool operator == (const User & rhs) const
  {
    if (!(userIndex == rhs.userIndex))
      return false;
    if (!(userPassword == rhs.userPassword))
      return false;
    return true;
  }
  bool operator != (const User &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const User & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(User &a, User &b);

inline std::ostream& operator<<(std::ostream& out, const User& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _UserData__isset {
  _UserData__isset() : userName(false), registrationDate(false), allMessagesIndex(false), privateMessagesIndex(false) {}
  bool userName :1;
  bool registrationDate :1;
  bool allMessagesIndex :1;
  bool privateMessagesIndex :1;
} _UserData__isset;

class UserData : public virtual ::apache::thrift::TBase {
 public:

  UserData(const UserData&);
  UserData& operator=(const UserData&);
  UserData() : userName(), registrationDate(), allMessagesIndex(0), privateMessagesIndex(0) {
  }

  virtual ~UserData() throw();
  std::string userName;
  std::string registrationDate;
  int32_t allMessagesIndex;
  int32_t privateMessagesIndex;

  _UserData__isset __isset;

  void __set_userName(const std::string& val);

  void __set_registrationDate(const std::string& val);

  void __set_allMessagesIndex(const int32_t val);

  void __set_privateMessagesIndex(const int32_t val);

  bool operator == (const UserData & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(registrationDate == rhs.registrationDate))
      return false;
    if (!(allMessagesIndex == rhs.allMessagesIndex))
      return false;
    if (!(privateMessagesIndex == rhs.privateMessagesIndex))
      return false;
    return true;
  }
  bool operator != (const UserData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserData &a, UserData &b);

inline std::ostream& operator<<(std::ostream& out, const UserData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SimpleMessage__isset {
  _SimpleMessage__isset() : time(false), userName(false), textMessage(false) {}
  bool time :1;
  bool userName :1;
  bool textMessage :1;
} _SimpleMessage__isset;

class SimpleMessage : public virtual ::apache::thrift::TBase {
 public:

  SimpleMessage(const SimpleMessage&);
  SimpleMessage& operator=(const SimpleMessage&);
  SimpleMessage() : time(), userName(), textMessage() {
  }

  virtual ~SimpleMessage() throw();
  std::string time;
  std::string userName;
  std::string textMessage;

  _SimpleMessage__isset __isset;

  void __set_time(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_textMessage(const std::string& val);

  bool operator == (const SimpleMessage & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(userName == rhs.userName))
      return false;
    if (!(textMessage == rhs.textMessage))
      return false;
    return true;
  }
  bool operator != (const SimpleMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SimpleMessage &a, SimpleMessage &b);

inline std::ostream& operator<<(std::ostream& out, const SimpleMessage& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InvalidNameException__isset {
  _InvalidNameException__isset() : errorCode(false), errorMessage(false) {}
  bool errorCode :1;
  bool errorMessage :1;
} _InvalidNameException__isset;

class InvalidNameException : public ::apache::thrift::TException {
 public:

  InvalidNameException(const InvalidNameException&);
  InvalidNameException& operator=(const InvalidNameException&);
  InvalidNameException() : errorCode(0), errorMessage() {
  }

  virtual ~InvalidNameException() throw();
  int32_t errorCode;
  std::string errorMessage;

  _InvalidNameException__isset __isset;

  void __set_errorCode(const int32_t val);

  void __set_errorMessage(const std::string& val);

  bool operator == (const InvalidNameException & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(errorMessage == rhs.errorMessage))
      return false;
    return true;
  }
  bool operator != (const InvalidNameException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidNameException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidNameException &a, InvalidNameException &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidNameException& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
