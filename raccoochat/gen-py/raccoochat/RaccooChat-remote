#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from raccoochat import RaccooChat
from raccoochat.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ifRegisteredUser(string userName)')
    print('  void validateName(string userName)')
    print('  void validatePassword(string userPassword)')
    print('  void comparePassword(string userName, string userPassword)')
    print('  void ifUserOnline(string userName)')
    print('  void ifUserOffline(string userName)')
    print('  void registrationUser(string userName, string userPassword)')
    print('  i32 connectUser(string userName)')
    print('  void disconnectUser(i32 userId)')
    print('  string getUserName(i32 userId)')
    print('  i32 getUserId(string userName)')
    print('   getAllOnlineUsers()')
    print('   getChatHistory()')
    print('   getNewMessages(i32 userId)')
    print('   getNewPrivateMessages(i32 userId)')
    print('  void addMessage(Message msg)')
    print('  void addPrivateMessage(i32 userId, Message msg)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = RaccooChat.Client(protocol)
transport.open()

if cmd == 'ifRegisteredUser':
    if len(args) != 1:
        print('ifRegisteredUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.ifRegisteredUser(args[0],))

elif cmd == 'validateName':
    if len(args) != 1:
        print('validateName requires 1 args')
        sys.exit(1)
    pp.pprint(client.validateName(args[0],))

elif cmd == 'validatePassword':
    if len(args) != 1:
        print('validatePassword requires 1 args')
        sys.exit(1)
    pp.pprint(client.validatePassword(args[0],))

elif cmd == 'comparePassword':
    if len(args) != 2:
        print('comparePassword requires 2 args')
        sys.exit(1)
    pp.pprint(client.comparePassword(args[0], args[1],))

elif cmd == 'ifUserOnline':
    if len(args) != 1:
        print('ifUserOnline requires 1 args')
        sys.exit(1)
    pp.pprint(client.ifUserOnline(args[0],))

elif cmd == 'ifUserOffline':
    if len(args) != 1:
        print('ifUserOffline requires 1 args')
        sys.exit(1)
    pp.pprint(client.ifUserOffline(args[0],))

elif cmd == 'registrationUser':
    if len(args) != 2:
        print('registrationUser requires 2 args')
        sys.exit(1)
    pp.pprint(client.registrationUser(args[0], args[1],))

elif cmd == 'connectUser':
    if len(args) != 1:
        print('connectUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.connectUser(args[0],))

elif cmd == 'disconnectUser':
    if len(args) != 1:
        print('disconnectUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.disconnectUser(eval(args[0]),))

elif cmd == 'getUserName':
    if len(args) != 1:
        print('getUserName requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUserName(eval(args[0]),))

elif cmd == 'getUserId':
    if len(args) != 1:
        print('getUserId requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUserId(args[0],))

elif cmd == 'getAllOnlineUsers':
    if len(args) != 0:
        print('getAllOnlineUsers requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAllOnlineUsers())

elif cmd == 'getChatHistory':
    if len(args) != 0:
        print('getChatHistory requires 0 args')
        sys.exit(1)
    pp.pprint(client.getChatHistory())

elif cmd == 'getNewMessages':
    if len(args) != 1:
        print('getNewMessages requires 1 args')
        sys.exit(1)
    pp.pprint(client.getNewMessages(eval(args[0]),))

elif cmd == 'getNewPrivateMessages':
    if len(args) != 1:
        print('getNewPrivateMessages requires 1 args')
        sys.exit(1)
    pp.pprint(client.getNewPrivateMessages(eval(args[0]),))

elif cmd == 'addMessage':
    if len(args) != 1:
        print('addMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.addMessage(eval(args[0]),))

elif cmd == 'addPrivateMessage':
    if len(args) != 2:
        print('addPrivateMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.addPrivateMessage(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
