/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tutorial_TYPES_H
#define tutorial_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace tutorial {

typedef int32_t MyInteger;

class Message;

class InvalidValueException;

typedef struct _Message__isset {
  _Message__isset() : time(false), user_name(false), text(false) {}
  bool time :1;
  bool user_name :1;
  bool text :1;
} _Message__isset;

class Message : public virtual ::apache::thrift::TBase {
 public:

  Message(const Message&);
  Message& operator=(const Message&);
  Message() : time(), user_name(), text() {
  }

  virtual ~Message() throw();
  std::string time;
  std::string user_name;
  std::string text;

  _Message__isset __isset;

  void __set_time(const std::string& val);

  void __set_user_name(const std::string& val);

  void __set_text(const std::string& val);

  bool operator == (const Message & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(user_name == rhs.user_name))
      return false;
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Message &a, Message &b);

inline std::ostream& operator<<(std::ostream& out, const Message& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InvalidValueException__isset {
  _InvalidValueException__isset() : error_code(false), error_msg(false) {}
  bool error_code :1;
  bool error_msg :1;
} _InvalidValueException__isset;

class InvalidValueException : public ::apache::thrift::TException {
 public:

  InvalidValueException(const InvalidValueException&);
  InvalidValueException& operator=(const InvalidValueException&);
  InvalidValueException() : error_code(0), error_msg() {
  }

  virtual ~InvalidValueException() throw();
  int32_t error_code;
  std::string error_msg;

  _InvalidValueException__isset __isset;

  void __set_error_code(const int32_t val);

  void __set_error_msg(const std::string& val);

  bool operator == (const InvalidValueException & rhs) const
  {
    if (!(error_code == rhs.error_code))
      return false;
    if (!(error_msg == rhs.error_msg))
      return false;
    return true;
  }
  bool operator != (const InvalidValueException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidValueException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidValueException &a, InvalidValueException &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidValueException& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
