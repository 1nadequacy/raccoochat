/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RaccooChat_H
#define RaccooChat_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "raccoochat_types.h"

namespace raccoochat {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RaccooChatIf {
 public:
  virtual ~RaccooChatIf() {}
  virtual void ifRegisteredUser(const std::string& userName) = 0;
  virtual void validateName(const std::string& userName) = 0;
  virtual void validatePassword(const std::string& userPassword) = 0;
  virtual void comparePassword(const std::string& userName, const std::string& userPassword) = 0;
  virtual void ifUserOnline(const std::string& userName) = 0;
  virtual void ifUserOffline(const std::string& userName) = 0;
  virtual void registrationUser(const std::string& userName, const std::string& userPassword) = 0;
  virtual int32_t connectUser(const std::string& userName) = 0;
  virtual void disconnectUser(const int32_t userId) = 0;
  virtual void getUserName(std::string& _return, const int32_t userId) = 0;
  virtual int32_t getUserId(const std::string& userName) = 0;
  virtual void getAllOnlineUsers(std::set<std::string> & _return) = 0;
  virtual void getChatHistory(std::vector<Message> & _return) = 0;
  virtual void getNewMessages(std::vector<Message> & _return, const int32_t userId) = 0;
  virtual void getNewPrivateMessages(std::vector<Message> & _return, const int32_t userId) = 0;
  virtual void addMessage(const Message& msg) = 0;
  virtual void addPrivateMessage(const int32_t userId, const Message& msg) = 0;
};

class RaccooChatIfFactory {
 public:
  typedef RaccooChatIf Handler;

  virtual ~RaccooChatIfFactory() {}

  virtual RaccooChatIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RaccooChatIf* /* handler */) = 0;
};

class RaccooChatIfSingletonFactory : virtual public RaccooChatIfFactory {
 public:
  RaccooChatIfSingletonFactory(const boost::shared_ptr<RaccooChatIf>& iface) : iface_(iface) {}
  virtual ~RaccooChatIfSingletonFactory() {}

  virtual RaccooChatIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RaccooChatIf* /* handler */) {}

 protected:
  boost::shared_ptr<RaccooChatIf> iface_;
};

class RaccooChatNull : virtual public RaccooChatIf {
 public:
  virtual ~RaccooChatNull() {}
  void ifRegisteredUser(const std::string& /* userName */) {
    return;
  }
  void validateName(const std::string& /* userName */) {
    return;
  }
  void validatePassword(const std::string& /* userPassword */) {
    return;
  }
  void comparePassword(const std::string& /* userName */, const std::string& /* userPassword */) {
    return;
  }
  void ifUserOnline(const std::string& /* userName */) {
    return;
  }
  void ifUserOffline(const std::string& /* userName */) {
    return;
  }
  void registrationUser(const std::string& /* userName */, const std::string& /* userPassword */) {
    return;
  }
  int32_t connectUser(const std::string& /* userName */) {
    int32_t _return = 0;
    return _return;
  }
  void disconnectUser(const int32_t /* userId */) {
    return;
  }
  void getUserName(std::string& /* _return */, const int32_t /* userId */) {
    return;
  }
  int32_t getUserId(const std::string& /* userName */) {
    int32_t _return = 0;
    return _return;
  }
  void getAllOnlineUsers(std::set<std::string> & /* _return */) {
    return;
  }
  void getChatHistory(std::vector<Message> & /* _return */) {
    return;
  }
  void getNewMessages(std::vector<Message> & /* _return */, const int32_t /* userId */) {
    return;
  }
  void getNewPrivateMessages(std::vector<Message> & /* _return */, const int32_t /* userId */) {
    return;
  }
  void addMessage(const Message& /* msg */) {
    return;
  }
  void addPrivateMessage(const int32_t /* userId */, const Message& /* msg */) {
    return;
  }
};

typedef struct _RaccooChat_ifRegisteredUser_args__isset {
  _RaccooChat_ifRegisteredUser_args__isset() : userName(false) {}
  bool userName :1;
} _RaccooChat_ifRegisteredUser_args__isset;

class RaccooChat_ifRegisteredUser_args {
 public:

  RaccooChat_ifRegisteredUser_args(const RaccooChat_ifRegisteredUser_args&);
  RaccooChat_ifRegisteredUser_args& operator=(const RaccooChat_ifRegisteredUser_args&);
  RaccooChat_ifRegisteredUser_args() : userName() {
  }

  virtual ~RaccooChat_ifRegisteredUser_args() throw();
  std::string userName;

  _RaccooChat_ifRegisteredUser_args__isset __isset;

  void __set_userName(const std::string& val);

  bool operator == (const RaccooChat_ifRegisteredUser_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_ifRegisteredUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_ifRegisteredUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_ifRegisteredUser_pargs {
 public:


  virtual ~RaccooChat_ifRegisteredUser_pargs() throw();
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_ifRegisteredUser_result__isset {
  _RaccooChat_ifRegisteredUser_result__isset() : e(false) {}
  bool e :1;
} _RaccooChat_ifRegisteredUser_result__isset;

class RaccooChat_ifRegisteredUser_result {
 public:

  RaccooChat_ifRegisteredUser_result(const RaccooChat_ifRegisteredUser_result&);
  RaccooChat_ifRegisteredUser_result& operator=(const RaccooChat_ifRegisteredUser_result&);
  RaccooChat_ifRegisteredUser_result() {
  }

  virtual ~RaccooChat_ifRegisteredUser_result() throw();
  InvalidNameException e;

  _RaccooChat_ifRegisteredUser_result__isset __isset;

  void __set_e(const InvalidNameException& val);

  bool operator == (const RaccooChat_ifRegisteredUser_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_ifRegisteredUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_ifRegisteredUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_ifRegisteredUser_presult__isset {
  _RaccooChat_ifRegisteredUser_presult__isset() : e(false) {}
  bool e :1;
} _RaccooChat_ifRegisteredUser_presult__isset;

class RaccooChat_ifRegisteredUser_presult {
 public:


  virtual ~RaccooChat_ifRegisteredUser_presult() throw();
  InvalidNameException e;

  _RaccooChat_ifRegisteredUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_validateName_args__isset {
  _RaccooChat_validateName_args__isset() : userName(false) {}
  bool userName :1;
} _RaccooChat_validateName_args__isset;

class RaccooChat_validateName_args {
 public:

  RaccooChat_validateName_args(const RaccooChat_validateName_args&);
  RaccooChat_validateName_args& operator=(const RaccooChat_validateName_args&);
  RaccooChat_validateName_args() : userName() {
  }

  virtual ~RaccooChat_validateName_args() throw();
  std::string userName;

  _RaccooChat_validateName_args__isset __isset;

  void __set_userName(const std::string& val);

  bool operator == (const RaccooChat_validateName_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_validateName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_validateName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_validateName_pargs {
 public:


  virtual ~RaccooChat_validateName_pargs() throw();
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_validateName_result__isset {
  _RaccooChat_validateName_result__isset() : e(false) {}
  bool e :1;
} _RaccooChat_validateName_result__isset;

class RaccooChat_validateName_result {
 public:

  RaccooChat_validateName_result(const RaccooChat_validateName_result&);
  RaccooChat_validateName_result& operator=(const RaccooChat_validateName_result&);
  RaccooChat_validateName_result() {
  }

  virtual ~RaccooChat_validateName_result() throw();
  InvalidNameException e;

  _RaccooChat_validateName_result__isset __isset;

  void __set_e(const InvalidNameException& val);

  bool operator == (const RaccooChat_validateName_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_validateName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_validateName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_validateName_presult__isset {
  _RaccooChat_validateName_presult__isset() : e(false) {}
  bool e :1;
} _RaccooChat_validateName_presult__isset;

class RaccooChat_validateName_presult {
 public:


  virtual ~RaccooChat_validateName_presult() throw();
  InvalidNameException e;

  _RaccooChat_validateName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_validatePassword_args__isset {
  _RaccooChat_validatePassword_args__isset() : userPassword(false) {}
  bool userPassword :1;
} _RaccooChat_validatePassword_args__isset;

class RaccooChat_validatePassword_args {
 public:

  RaccooChat_validatePassword_args(const RaccooChat_validatePassword_args&);
  RaccooChat_validatePassword_args& operator=(const RaccooChat_validatePassword_args&);
  RaccooChat_validatePassword_args() : userPassword() {
  }

  virtual ~RaccooChat_validatePassword_args() throw();
  std::string userPassword;

  _RaccooChat_validatePassword_args__isset __isset;

  void __set_userPassword(const std::string& val);

  bool operator == (const RaccooChat_validatePassword_args & rhs) const
  {
    if (!(userPassword == rhs.userPassword))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_validatePassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_validatePassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_validatePassword_pargs {
 public:


  virtual ~RaccooChat_validatePassword_pargs() throw();
  const std::string* userPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_validatePassword_result__isset {
  _RaccooChat_validatePassword_result__isset() : e(false) {}
  bool e :1;
} _RaccooChat_validatePassword_result__isset;

class RaccooChat_validatePassword_result {
 public:

  RaccooChat_validatePassword_result(const RaccooChat_validatePassword_result&);
  RaccooChat_validatePassword_result& operator=(const RaccooChat_validatePassword_result&);
  RaccooChat_validatePassword_result() {
  }

  virtual ~RaccooChat_validatePassword_result() throw();
  InvalidNameException e;

  _RaccooChat_validatePassword_result__isset __isset;

  void __set_e(const InvalidNameException& val);

  bool operator == (const RaccooChat_validatePassword_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_validatePassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_validatePassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_validatePassword_presult__isset {
  _RaccooChat_validatePassword_presult__isset() : e(false) {}
  bool e :1;
} _RaccooChat_validatePassword_presult__isset;

class RaccooChat_validatePassword_presult {
 public:


  virtual ~RaccooChat_validatePassword_presult() throw();
  InvalidNameException e;

  _RaccooChat_validatePassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_comparePassword_args__isset {
  _RaccooChat_comparePassword_args__isset() : userName(false), userPassword(false) {}
  bool userName :1;
  bool userPassword :1;
} _RaccooChat_comparePassword_args__isset;

class RaccooChat_comparePassword_args {
 public:

  RaccooChat_comparePassword_args(const RaccooChat_comparePassword_args&);
  RaccooChat_comparePassword_args& operator=(const RaccooChat_comparePassword_args&);
  RaccooChat_comparePassword_args() : userName(), userPassword() {
  }

  virtual ~RaccooChat_comparePassword_args() throw();
  std::string userName;
  std::string userPassword;

  _RaccooChat_comparePassword_args__isset __isset;

  void __set_userName(const std::string& val);

  void __set_userPassword(const std::string& val);

  bool operator == (const RaccooChat_comparePassword_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(userPassword == rhs.userPassword))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_comparePassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_comparePassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_comparePassword_pargs {
 public:


  virtual ~RaccooChat_comparePassword_pargs() throw();
  const std::string* userName;
  const std::string* userPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_comparePassword_result__isset {
  _RaccooChat_comparePassword_result__isset() : e(false) {}
  bool e :1;
} _RaccooChat_comparePassword_result__isset;

class RaccooChat_comparePassword_result {
 public:

  RaccooChat_comparePassword_result(const RaccooChat_comparePassword_result&);
  RaccooChat_comparePassword_result& operator=(const RaccooChat_comparePassword_result&);
  RaccooChat_comparePassword_result() {
  }

  virtual ~RaccooChat_comparePassword_result() throw();
  InvalidNameException e;

  _RaccooChat_comparePassword_result__isset __isset;

  void __set_e(const InvalidNameException& val);

  bool operator == (const RaccooChat_comparePassword_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_comparePassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_comparePassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_comparePassword_presult__isset {
  _RaccooChat_comparePassword_presult__isset() : e(false) {}
  bool e :1;
} _RaccooChat_comparePassword_presult__isset;

class RaccooChat_comparePassword_presult {
 public:


  virtual ~RaccooChat_comparePassword_presult() throw();
  InvalidNameException e;

  _RaccooChat_comparePassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_ifUserOnline_args__isset {
  _RaccooChat_ifUserOnline_args__isset() : userName(false) {}
  bool userName :1;
} _RaccooChat_ifUserOnline_args__isset;

class RaccooChat_ifUserOnline_args {
 public:

  RaccooChat_ifUserOnline_args(const RaccooChat_ifUserOnline_args&);
  RaccooChat_ifUserOnline_args& operator=(const RaccooChat_ifUserOnline_args&);
  RaccooChat_ifUserOnline_args() : userName() {
  }

  virtual ~RaccooChat_ifUserOnline_args() throw();
  std::string userName;

  _RaccooChat_ifUserOnline_args__isset __isset;

  void __set_userName(const std::string& val);

  bool operator == (const RaccooChat_ifUserOnline_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_ifUserOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_ifUserOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_ifUserOnline_pargs {
 public:


  virtual ~RaccooChat_ifUserOnline_pargs() throw();
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_ifUserOnline_result__isset {
  _RaccooChat_ifUserOnline_result__isset() : e(false) {}
  bool e :1;
} _RaccooChat_ifUserOnline_result__isset;

class RaccooChat_ifUserOnline_result {
 public:

  RaccooChat_ifUserOnline_result(const RaccooChat_ifUserOnline_result&);
  RaccooChat_ifUserOnline_result& operator=(const RaccooChat_ifUserOnline_result&);
  RaccooChat_ifUserOnline_result() {
  }

  virtual ~RaccooChat_ifUserOnline_result() throw();
  InvalidNameException e;

  _RaccooChat_ifUserOnline_result__isset __isset;

  void __set_e(const InvalidNameException& val);

  bool operator == (const RaccooChat_ifUserOnline_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_ifUserOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_ifUserOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_ifUserOnline_presult__isset {
  _RaccooChat_ifUserOnline_presult__isset() : e(false) {}
  bool e :1;
} _RaccooChat_ifUserOnline_presult__isset;

class RaccooChat_ifUserOnline_presult {
 public:


  virtual ~RaccooChat_ifUserOnline_presult() throw();
  InvalidNameException e;

  _RaccooChat_ifUserOnline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_ifUserOffline_args__isset {
  _RaccooChat_ifUserOffline_args__isset() : userName(false) {}
  bool userName :1;
} _RaccooChat_ifUserOffline_args__isset;

class RaccooChat_ifUserOffline_args {
 public:

  RaccooChat_ifUserOffline_args(const RaccooChat_ifUserOffline_args&);
  RaccooChat_ifUserOffline_args& operator=(const RaccooChat_ifUserOffline_args&);
  RaccooChat_ifUserOffline_args() : userName() {
  }

  virtual ~RaccooChat_ifUserOffline_args() throw();
  std::string userName;

  _RaccooChat_ifUserOffline_args__isset __isset;

  void __set_userName(const std::string& val);

  bool operator == (const RaccooChat_ifUserOffline_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_ifUserOffline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_ifUserOffline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_ifUserOffline_pargs {
 public:


  virtual ~RaccooChat_ifUserOffline_pargs() throw();
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_ifUserOffline_result__isset {
  _RaccooChat_ifUserOffline_result__isset() : e(false) {}
  bool e :1;
} _RaccooChat_ifUserOffline_result__isset;

class RaccooChat_ifUserOffline_result {
 public:

  RaccooChat_ifUserOffline_result(const RaccooChat_ifUserOffline_result&);
  RaccooChat_ifUserOffline_result& operator=(const RaccooChat_ifUserOffline_result&);
  RaccooChat_ifUserOffline_result() {
  }

  virtual ~RaccooChat_ifUserOffline_result() throw();
  InvalidNameException e;

  _RaccooChat_ifUserOffline_result__isset __isset;

  void __set_e(const InvalidNameException& val);

  bool operator == (const RaccooChat_ifUserOffline_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_ifUserOffline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_ifUserOffline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_ifUserOffline_presult__isset {
  _RaccooChat_ifUserOffline_presult__isset() : e(false) {}
  bool e :1;
} _RaccooChat_ifUserOffline_presult__isset;

class RaccooChat_ifUserOffline_presult {
 public:


  virtual ~RaccooChat_ifUserOffline_presult() throw();
  InvalidNameException e;

  _RaccooChat_ifUserOffline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_registrationUser_args__isset {
  _RaccooChat_registrationUser_args__isset() : userName(false), userPassword(false) {}
  bool userName :1;
  bool userPassword :1;
} _RaccooChat_registrationUser_args__isset;

class RaccooChat_registrationUser_args {
 public:

  RaccooChat_registrationUser_args(const RaccooChat_registrationUser_args&);
  RaccooChat_registrationUser_args& operator=(const RaccooChat_registrationUser_args&);
  RaccooChat_registrationUser_args() : userName(), userPassword() {
  }

  virtual ~RaccooChat_registrationUser_args() throw();
  std::string userName;
  std::string userPassword;

  _RaccooChat_registrationUser_args__isset __isset;

  void __set_userName(const std::string& val);

  void __set_userPassword(const std::string& val);

  bool operator == (const RaccooChat_registrationUser_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(userPassword == rhs.userPassword))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_registrationUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_registrationUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_registrationUser_pargs {
 public:


  virtual ~RaccooChat_registrationUser_pargs() throw();
  const std::string* userName;
  const std::string* userPassword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_registrationUser_result {
 public:

  RaccooChat_registrationUser_result(const RaccooChat_registrationUser_result&);
  RaccooChat_registrationUser_result& operator=(const RaccooChat_registrationUser_result&);
  RaccooChat_registrationUser_result() {
  }

  virtual ~RaccooChat_registrationUser_result() throw();

  bool operator == (const RaccooChat_registrationUser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RaccooChat_registrationUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_registrationUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_registrationUser_presult {
 public:


  virtual ~RaccooChat_registrationUser_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_connectUser_args__isset {
  _RaccooChat_connectUser_args__isset() : userName(false) {}
  bool userName :1;
} _RaccooChat_connectUser_args__isset;

class RaccooChat_connectUser_args {
 public:

  RaccooChat_connectUser_args(const RaccooChat_connectUser_args&);
  RaccooChat_connectUser_args& operator=(const RaccooChat_connectUser_args&);
  RaccooChat_connectUser_args() : userName() {
  }

  virtual ~RaccooChat_connectUser_args() throw();
  std::string userName;

  _RaccooChat_connectUser_args__isset __isset;

  void __set_userName(const std::string& val);

  bool operator == (const RaccooChat_connectUser_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_connectUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_connectUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_connectUser_pargs {
 public:


  virtual ~RaccooChat_connectUser_pargs() throw();
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_connectUser_result__isset {
  _RaccooChat_connectUser_result__isset() : success(false) {}
  bool success :1;
} _RaccooChat_connectUser_result__isset;

class RaccooChat_connectUser_result {
 public:

  RaccooChat_connectUser_result(const RaccooChat_connectUser_result&);
  RaccooChat_connectUser_result& operator=(const RaccooChat_connectUser_result&);
  RaccooChat_connectUser_result() : success(0) {
  }

  virtual ~RaccooChat_connectUser_result() throw();
  int32_t success;

  _RaccooChat_connectUser_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RaccooChat_connectUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_connectUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_connectUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_connectUser_presult__isset {
  _RaccooChat_connectUser_presult__isset() : success(false) {}
  bool success :1;
} _RaccooChat_connectUser_presult__isset;

class RaccooChat_connectUser_presult {
 public:


  virtual ~RaccooChat_connectUser_presult() throw();
  int32_t* success;

  _RaccooChat_connectUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_disconnectUser_args__isset {
  _RaccooChat_disconnectUser_args__isset() : userId(false) {}
  bool userId :1;
} _RaccooChat_disconnectUser_args__isset;

class RaccooChat_disconnectUser_args {
 public:

  RaccooChat_disconnectUser_args(const RaccooChat_disconnectUser_args&);
  RaccooChat_disconnectUser_args& operator=(const RaccooChat_disconnectUser_args&);
  RaccooChat_disconnectUser_args() : userId(0) {
  }

  virtual ~RaccooChat_disconnectUser_args() throw();
  int32_t userId;

  _RaccooChat_disconnectUser_args__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const RaccooChat_disconnectUser_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_disconnectUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_disconnectUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_disconnectUser_pargs {
 public:


  virtual ~RaccooChat_disconnectUser_pargs() throw();
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_disconnectUser_result {
 public:

  RaccooChat_disconnectUser_result(const RaccooChat_disconnectUser_result&);
  RaccooChat_disconnectUser_result& operator=(const RaccooChat_disconnectUser_result&);
  RaccooChat_disconnectUser_result() {
  }

  virtual ~RaccooChat_disconnectUser_result() throw();

  bool operator == (const RaccooChat_disconnectUser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RaccooChat_disconnectUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_disconnectUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_disconnectUser_presult {
 public:


  virtual ~RaccooChat_disconnectUser_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_getUserName_args__isset {
  _RaccooChat_getUserName_args__isset() : userId(false) {}
  bool userId :1;
} _RaccooChat_getUserName_args__isset;

class RaccooChat_getUserName_args {
 public:

  RaccooChat_getUserName_args(const RaccooChat_getUserName_args&);
  RaccooChat_getUserName_args& operator=(const RaccooChat_getUserName_args&);
  RaccooChat_getUserName_args() : userId(0) {
  }

  virtual ~RaccooChat_getUserName_args() throw();
  int32_t userId;

  _RaccooChat_getUserName_args__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const RaccooChat_getUserName_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_getUserName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getUserName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_getUserName_pargs {
 public:


  virtual ~RaccooChat_getUserName_pargs() throw();
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getUserName_result__isset {
  _RaccooChat_getUserName_result__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getUserName_result__isset;

class RaccooChat_getUserName_result {
 public:

  RaccooChat_getUserName_result(const RaccooChat_getUserName_result&);
  RaccooChat_getUserName_result& operator=(const RaccooChat_getUserName_result&);
  RaccooChat_getUserName_result() : success() {
  }

  virtual ~RaccooChat_getUserName_result() throw();
  std::string success;

  _RaccooChat_getUserName_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const RaccooChat_getUserName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_getUserName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getUserName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getUserName_presult__isset {
  _RaccooChat_getUserName_presult__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getUserName_presult__isset;

class RaccooChat_getUserName_presult {
 public:


  virtual ~RaccooChat_getUserName_presult() throw();
  std::string* success;

  _RaccooChat_getUserName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_getUserId_args__isset {
  _RaccooChat_getUserId_args__isset() : userName(false) {}
  bool userName :1;
} _RaccooChat_getUserId_args__isset;

class RaccooChat_getUserId_args {
 public:

  RaccooChat_getUserId_args(const RaccooChat_getUserId_args&);
  RaccooChat_getUserId_args& operator=(const RaccooChat_getUserId_args&);
  RaccooChat_getUserId_args() : userName() {
  }

  virtual ~RaccooChat_getUserId_args() throw();
  std::string userName;

  _RaccooChat_getUserId_args__isset __isset;

  void __set_userName(const std::string& val);

  bool operator == (const RaccooChat_getUserId_args & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_getUserId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getUserId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_getUserId_pargs {
 public:


  virtual ~RaccooChat_getUserId_pargs() throw();
  const std::string* userName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getUserId_result__isset {
  _RaccooChat_getUserId_result__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getUserId_result__isset;

class RaccooChat_getUserId_result {
 public:

  RaccooChat_getUserId_result(const RaccooChat_getUserId_result&);
  RaccooChat_getUserId_result& operator=(const RaccooChat_getUserId_result&);
  RaccooChat_getUserId_result() : success(0) {
  }

  virtual ~RaccooChat_getUserId_result() throw();
  int32_t success;

  _RaccooChat_getUserId_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RaccooChat_getUserId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_getUserId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getUserId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getUserId_presult__isset {
  _RaccooChat_getUserId_presult__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getUserId_presult__isset;

class RaccooChat_getUserId_presult {
 public:


  virtual ~RaccooChat_getUserId_presult() throw();
  int32_t* success;

  _RaccooChat_getUserId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RaccooChat_getAllOnlineUsers_args {
 public:

  RaccooChat_getAllOnlineUsers_args(const RaccooChat_getAllOnlineUsers_args&);
  RaccooChat_getAllOnlineUsers_args& operator=(const RaccooChat_getAllOnlineUsers_args&);
  RaccooChat_getAllOnlineUsers_args() {
  }

  virtual ~RaccooChat_getAllOnlineUsers_args() throw();

  bool operator == (const RaccooChat_getAllOnlineUsers_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RaccooChat_getAllOnlineUsers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getAllOnlineUsers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_getAllOnlineUsers_pargs {
 public:


  virtual ~RaccooChat_getAllOnlineUsers_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getAllOnlineUsers_result__isset {
  _RaccooChat_getAllOnlineUsers_result__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getAllOnlineUsers_result__isset;

class RaccooChat_getAllOnlineUsers_result {
 public:

  RaccooChat_getAllOnlineUsers_result(const RaccooChat_getAllOnlineUsers_result&);
  RaccooChat_getAllOnlineUsers_result& operator=(const RaccooChat_getAllOnlineUsers_result&);
  RaccooChat_getAllOnlineUsers_result() {
  }

  virtual ~RaccooChat_getAllOnlineUsers_result() throw();
  std::set<std::string>  success;

  _RaccooChat_getAllOnlineUsers_result__isset __isset;

  void __set_success(const std::set<std::string> & val);

  bool operator == (const RaccooChat_getAllOnlineUsers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_getAllOnlineUsers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getAllOnlineUsers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getAllOnlineUsers_presult__isset {
  _RaccooChat_getAllOnlineUsers_presult__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getAllOnlineUsers_presult__isset;

class RaccooChat_getAllOnlineUsers_presult {
 public:


  virtual ~RaccooChat_getAllOnlineUsers_presult() throw();
  std::set<std::string> * success;

  _RaccooChat_getAllOnlineUsers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RaccooChat_getChatHistory_args {
 public:

  RaccooChat_getChatHistory_args(const RaccooChat_getChatHistory_args&);
  RaccooChat_getChatHistory_args& operator=(const RaccooChat_getChatHistory_args&);
  RaccooChat_getChatHistory_args() {
  }

  virtual ~RaccooChat_getChatHistory_args() throw();

  bool operator == (const RaccooChat_getChatHistory_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RaccooChat_getChatHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getChatHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_getChatHistory_pargs {
 public:


  virtual ~RaccooChat_getChatHistory_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getChatHistory_result__isset {
  _RaccooChat_getChatHistory_result__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getChatHistory_result__isset;

class RaccooChat_getChatHistory_result {
 public:

  RaccooChat_getChatHistory_result(const RaccooChat_getChatHistory_result&);
  RaccooChat_getChatHistory_result& operator=(const RaccooChat_getChatHistory_result&);
  RaccooChat_getChatHistory_result() {
  }

  virtual ~RaccooChat_getChatHistory_result() throw();
  std::vector<Message>  success;

  _RaccooChat_getChatHistory_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  bool operator == (const RaccooChat_getChatHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_getChatHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getChatHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getChatHistory_presult__isset {
  _RaccooChat_getChatHistory_presult__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getChatHistory_presult__isset;

class RaccooChat_getChatHistory_presult {
 public:


  virtual ~RaccooChat_getChatHistory_presult() throw();
  std::vector<Message> * success;

  _RaccooChat_getChatHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_getNewMessages_args__isset {
  _RaccooChat_getNewMessages_args__isset() : userId(false) {}
  bool userId :1;
} _RaccooChat_getNewMessages_args__isset;

class RaccooChat_getNewMessages_args {
 public:

  RaccooChat_getNewMessages_args(const RaccooChat_getNewMessages_args&);
  RaccooChat_getNewMessages_args& operator=(const RaccooChat_getNewMessages_args&);
  RaccooChat_getNewMessages_args() : userId(0) {
  }

  virtual ~RaccooChat_getNewMessages_args() throw();
  int32_t userId;

  _RaccooChat_getNewMessages_args__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const RaccooChat_getNewMessages_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_getNewMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getNewMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_getNewMessages_pargs {
 public:


  virtual ~RaccooChat_getNewMessages_pargs() throw();
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getNewMessages_result__isset {
  _RaccooChat_getNewMessages_result__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getNewMessages_result__isset;

class RaccooChat_getNewMessages_result {
 public:

  RaccooChat_getNewMessages_result(const RaccooChat_getNewMessages_result&);
  RaccooChat_getNewMessages_result& operator=(const RaccooChat_getNewMessages_result&);
  RaccooChat_getNewMessages_result() {
  }

  virtual ~RaccooChat_getNewMessages_result() throw();
  std::vector<Message>  success;

  _RaccooChat_getNewMessages_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  bool operator == (const RaccooChat_getNewMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_getNewMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getNewMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getNewMessages_presult__isset {
  _RaccooChat_getNewMessages_presult__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getNewMessages_presult__isset;

class RaccooChat_getNewMessages_presult {
 public:


  virtual ~RaccooChat_getNewMessages_presult() throw();
  std::vector<Message> * success;

  _RaccooChat_getNewMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_getNewPrivateMessages_args__isset {
  _RaccooChat_getNewPrivateMessages_args__isset() : userId(false) {}
  bool userId :1;
} _RaccooChat_getNewPrivateMessages_args__isset;

class RaccooChat_getNewPrivateMessages_args {
 public:

  RaccooChat_getNewPrivateMessages_args(const RaccooChat_getNewPrivateMessages_args&);
  RaccooChat_getNewPrivateMessages_args& operator=(const RaccooChat_getNewPrivateMessages_args&);
  RaccooChat_getNewPrivateMessages_args() : userId(0) {
  }

  virtual ~RaccooChat_getNewPrivateMessages_args() throw();
  int32_t userId;

  _RaccooChat_getNewPrivateMessages_args__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const RaccooChat_getNewPrivateMessages_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_getNewPrivateMessages_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getNewPrivateMessages_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_getNewPrivateMessages_pargs {
 public:


  virtual ~RaccooChat_getNewPrivateMessages_pargs() throw();
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getNewPrivateMessages_result__isset {
  _RaccooChat_getNewPrivateMessages_result__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getNewPrivateMessages_result__isset;

class RaccooChat_getNewPrivateMessages_result {
 public:

  RaccooChat_getNewPrivateMessages_result(const RaccooChat_getNewPrivateMessages_result&);
  RaccooChat_getNewPrivateMessages_result& operator=(const RaccooChat_getNewPrivateMessages_result&);
  RaccooChat_getNewPrivateMessages_result() {
  }

  virtual ~RaccooChat_getNewPrivateMessages_result() throw();
  std::vector<Message>  success;

  _RaccooChat_getNewPrivateMessages_result__isset __isset;

  void __set_success(const std::vector<Message> & val);

  bool operator == (const RaccooChat_getNewPrivateMessages_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_getNewPrivateMessages_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_getNewPrivateMessages_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RaccooChat_getNewPrivateMessages_presult__isset {
  _RaccooChat_getNewPrivateMessages_presult__isset() : success(false) {}
  bool success :1;
} _RaccooChat_getNewPrivateMessages_presult__isset;

class RaccooChat_getNewPrivateMessages_presult {
 public:


  virtual ~RaccooChat_getNewPrivateMessages_presult() throw();
  std::vector<Message> * success;

  _RaccooChat_getNewPrivateMessages_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_addMessage_args__isset {
  _RaccooChat_addMessage_args__isset() : msg(false) {}
  bool msg :1;
} _RaccooChat_addMessage_args__isset;

class RaccooChat_addMessage_args {
 public:

  RaccooChat_addMessage_args(const RaccooChat_addMessage_args&);
  RaccooChat_addMessage_args& operator=(const RaccooChat_addMessage_args&);
  RaccooChat_addMessage_args() {
  }

  virtual ~RaccooChat_addMessage_args() throw();
  Message msg;

  _RaccooChat_addMessage_args__isset __isset;

  void __set_msg(const Message& val);

  bool operator == (const RaccooChat_addMessage_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_addMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_addMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_addMessage_pargs {
 public:


  virtual ~RaccooChat_addMessage_pargs() throw();
  const Message* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_addMessage_result {
 public:

  RaccooChat_addMessage_result(const RaccooChat_addMessage_result&);
  RaccooChat_addMessage_result& operator=(const RaccooChat_addMessage_result&);
  RaccooChat_addMessage_result() {
  }

  virtual ~RaccooChat_addMessage_result() throw();

  bool operator == (const RaccooChat_addMessage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RaccooChat_addMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_addMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_addMessage_presult {
 public:


  virtual ~RaccooChat_addMessage_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RaccooChat_addPrivateMessage_args__isset {
  _RaccooChat_addPrivateMessage_args__isset() : userId(false), msg(false) {}
  bool userId :1;
  bool msg :1;
} _RaccooChat_addPrivateMessage_args__isset;

class RaccooChat_addPrivateMessage_args {
 public:

  RaccooChat_addPrivateMessage_args(const RaccooChat_addPrivateMessage_args&);
  RaccooChat_addPrivateMessage_args& operator=(const RaccooChat_addPrivateMessage_args&);
  RaccooChat_addPrivateMessage_args() : userId(0) {
  }

  virtual ~RaccooChat_addPrivateMessage_args() throw();
  int32_t userId;
  Message msg;

  _RaccooChat_addPrivateMessage_args__isset __isset;

  void __set_userId(const int32_t val);

  void __set_msg(const Message& val);

  bool operator == (const RaccooChat_addPrivateMessage_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const RaccooChat_addPrivateMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_addPrivateMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_addPrivateMessage_pargs {
 public:


  virtual ~RaccooChat_addPrivateMessage_pargs() throw();
  const int32_t* userId;
  const Message* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_addPrivateMessage_result {
 public:

  RaccooChat_addPrivateMessage_result(const RaccooChat_addPrivateMessage_result&);
  RaccooChat_addPrivateMessage_result& operator=(const RaccooChat_addPrivateMessage_result&);
  RaccooChat_addPrivateMessage_result() {
  }

  virtual ~RaccooChat_addPrivateMessage_result() throw();

  bool operator == (const RaccooChat_addPrivateMessage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RaccooChat_addPrivateMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RaccooChat_addPrivateMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RaccooChat_addPrivateMessage_presult {
 public:


  virtual ~RaccooChat_addPrivateMessage_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RaccooChatClient : virtual public RaccooChatIf {
 public:
  RaccooChatClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RaccooChatClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ifRegisteredUser(const std::string& userName);
  void send_ifRegisteredUser(const std::string& userName);
  void recv_ifRegisteredUser();
  void validateName(const std::string& userName);
  void send_validateName(const std::string& userName);
  void recv_validateName();
  void validatePassword(const std::string& userPassword);
  void send_validatePassword(const std::string& userPassword);
  void recv_validatePassword();
  void comparePassword(const std::string& userName, const std::string& userPassword);
  void send_comparePassword(const std::string& userName, const std::string& userPassword);
  void recv_comparePassword();
  void ifUserOnline(const std::string& userName);
  void send_ifUserOnline(const std::string& userName);
  void recv_ifUserOnline();
  void ifUserOffline(const std::string& userName);
  void send_ifUserOffline(const std::string& userName);
  void recv_ifUserOffline();
  void registrationUser(const std::string& userName, const std::string& userPassword);
  void send_registrationUser(const std::string& userName, const std::string& userPassword);
  void recv_registrationUser();
  int32_t connectUser(const std::string& userName);
  void send_connectUser(const std::string& userName);
  int32_t recv_connectUser();
  void disconnectUser(const int32_t userId);
  void send_disconnectUser(const int32_t userId);
  void recv_disconnectUser();
  void getUserName(std::string& _return, const int32_t userId);
  void send_getUserName(const int32_t userId);
  void recv_getUserName(std::string& _return);
  int32_t getUserId(const std::string& userName);
  void send_getUserId(const std::string& userName);
  int32_t recv_getUserId();
  void getAllOnlineUsers(std::set<std::string> & _return);
  void send_getAllOnlineUsers();
  void recv_getAllOnlineUsers(std::set<std::string> & _return);
  void getChatHistory(std::vector<Message> & _return);
  void send_getChatHistory();
  void recv_getChatHistory(std::vector<Message> & _return);
  void getNewMessages(std::vector<Message> & _return, const int32_t userId);
  void send_getNewMessages(const int32_t userId);
  void recv_getNewMessages(std::vector<Message> & _return);
  void getNewPrivateMessages(std::vector<Message> & _return, const int32_t userId);
  void send_getNewPrivateMessages(const int32_t userId);
  void recv_getNewPrivateMessages(std::vector<Message> & _return);
  void addMessage(const Message& msg);
  void send_addMessage(const Message& msg);
  void recv_addMessage();
  void addPrivateMessage(const int32_t userId, const Message& msg);
  void send_addPrivateMessage(const int32_t userId, const Message& msg);
  void recv_addPrivateMessage();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RaccooChatProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RaccooChatIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RaccooChatProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ifRegisteredUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validateName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validatePassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_comparePassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ifUserOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ifUserOffline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registrationUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_connectUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnectUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllOnlineUsers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getChatHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNewMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNewPrivateMessages(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addPrivateMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RaccooChatProcessor(boost::shared_ptr<RaccooChatIf> iface) :
    iface_(iface) {
    processMap_["ifRegisteredUser"] = &RaccooChatProcessor::process_ifRegisteredUser;
    processMap_["validateName"] = &RaccooChatProcessor::process_validateName;
    processMap_["validatePassword"] = &RaccooChatProcessor::process_validatePassword;
    processMap_["comparePassword"] = &RaccooChatProcessor::process_comparePassword;
    processMap_["ifUserOnline"] = &RaccooChatProcessor::process_ifUserOnline;
    processMap_["ifUserOffline"] = &RaccooChatProcessor::process_ifUserOffline;
    processMap_["registrationUser"] = &RaccooChatProcessor::process_registrationUser;
    processMap_["connectUser"] = &RaccooChatProcessor::process_connectUser;
    processMap_["disconnectUser"] = &RaccooChatProcessor::process_disconnectUser;
    processMap_["getUserName"] = &RaccooChatProcessor::process_getUserName;
    processMap_["getUserId"] = &RaccooChatProcessor::process_getUserId;
    processMap_["getAllOnlineUsers"] = &RaccooChatProcessor::process_getAllOnlineUsers;
    processMap_["getChatHistory"] = &RaccooChatProcessor::process_getChatHistory;
    processMap_["getNewMessages"] = &RaccooChatProcessor::process_getNewMessages;
    processMap_["getNewPrivateMessages"] = &RaccooChatProcessor::process_getNewPrivateMessages;
    processMap_["addMessage"] = &RaccooChatProcessor::process_addMessage;
    processMap_["addPrivateMessage"] = &RaccooChatProcessor::process_addPrivateMessage;
  }

  virtual ~RaccooChatProcessor() {}
};

class RaccooChatProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RaccooChatProcessorFactory(const ::boost::shared_ptr< RaccooChatIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RaccooChatIfFactory > handlerFactory_;
};

class RaccooChatMultiface : virtual public RaccooChatIf {
 public:
  RaccooChatMultiface(std::vector<boost::shared_ptr<RaccooChatIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RaccooChatMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RaccooChatIf> > ifaces_;
  RaccooChatMultiface() {}
  void add(boost::shared_ptr<RaccooChatIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ifRegisteredUser(const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ifRegisteredUser(userName);
    }
    ifaces_[i]->ifRegisteredUser(userName);
  }

  void validateName(const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validateName(userName);
    }
    ifaces_[i]->validateName(userName);
  }

  void validatePassword(const std::string& userPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validatePassword(userPassword);
    }
    ifaces_[i]->validatePassword(userPassword);
  }

  void comparePassword(const std::string& userName, const std::string& userPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->comparePassword(userName, userPassword);
    }
    ifaces_[i]->comparePassword(userName, userPassword);
  }

  void ifUserOnline(const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ifUserOnline(userName);
    }
    ifaces_[i]->ifUserOnline(userName);
  }

  void ifUserOffline(const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ifUserOffline(userName);
    }
    ifaces_[i]->ifUserOffline(userName);
  }

  void registrationUser(const std::string& userName, const std::string& userPassword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registrationUser(userName, userPassword);
    }
    ifaces_[i]->registrationUser(userName, userPassword);
  }

  int32_t connectUser(const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connectUser(userName);
    }
    return ifaces_[i]->connectUser(userName);
  }

  void disconnectUser(const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnectUser(userId);
    }
    ifaces_[i]->disconnectUser(userId);
  }

  void getUserName(std::string& _return, const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserName(_return, userId);
    }
    ifaces_[i]->getUserName(_return, userId);
    return;
  }

  int32_t getUserId(const std::string& userName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserId(userName);
    }
    return ifaces_[i]->getUserId(userName);
  }

  void getAllOnlineUsers(std::set<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllOnlineUsers(_return);
    }
    ifaces_[i]->getAllOnlineUsers(_return);
    return;
  }

  void getChatHistory(std::vector<Message> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getChatHistory(_return);
    }
    ifaces_[i]->getChatHistory(_return);
    return;
  }

  void getNewMessages(std::vector<Message> & _return, const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNewMessages(_return, userId);
    }
    ifaces_[i]->getNewMessages(_return, userId);
    return;
  }

  void getNewPrivateMessages(std::vector<Message> & _return, const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNewPrivateMessages(_return, userId);
    }
    ifaces_[i]->getNewPrivateMessages(_return, userId);
    return;
  }

  void addMessage(const Message& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addMessage(msg);
    }
    ifaces_[i]->addMessage(msg);
  }

  void addPrivateMessage(const int32_t userId, const Message& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addPrivateMessage(userId, msg);
    }
    ifaces_[i]->addPrivateMessage(userId, msg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RaccooChatConcurrentClient : virtual public RaccooChatIf {
 public:
  RaccooChatConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RaccooChatConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ifRegisteredUser(const std::string& userName);
  int32_t send_ifRegisteredUser(const std::string& userName);
  void recv_ifRegisteredUser(const int32_t seqid);
  void validateName(const std::string& userName);
  int32_t send_validateName(const std::string& userName);
  void recv_validateName(const int32_t seqid);
  void validatePassword(const std::string& userPassword);
  int32_t send_validatePassword(const std::string& userPassword);
  void recv_validatePassword(const int32_t seqid);
  void comparePassword(const std::string& userName, const std::string& userPassword);
  int32_t send_comparePassword(const std::string& userName, const std::string& userPassword);
  void recv_comparePassword(const int32_t seqid);
  void ifUserOnline(const std::string& userName);
  int32_t send_ifUserOnline(const std::string& userName);
  void recv_ifUserOnline(const int32_t seqid);
  void ifUserOffline(const std::string& userName);
  int32_t send_ifUserOffline(const std::string& userName);
  void recv_ifUserOffline(const int32_t seqid);
  void registrationUser(const std::string& userName, const std::string& userPassword);
  int32_t send_registrationUser(const std::string& userName, const std::string& userPassword);
  void recv_registrationUser(const int32_t seqid);
  int32_t connectUser(const std::string& userName);
  int32_t send_connectUser(const std::string& userName);
  int32_t recv_connectUser(const int32_t seqid);
  void disconnectUser(const int32_t userId);
  int32_t send_disconnectUser(const int32_t userId);
  void recv_disconnectUser(const int32_t seqid);
  void getUserName(std::string& _return, const int32_t userId);
  int32_t send_getUserName(const int32_t userId);
  void recv_getUserName(std::string& _return, const int32_t seqid);
  int32_t getUserId(const std::string& userName);
  int32_t send_getUserId(const std::string& userName);
  int32_t recv_getUserId(const int32_t seqid);
  void getAllOnlineUsers(std::set<std::string> & _return);
  int32_t send_getAllOnlineUsers();
  void recv_getAllOnlineUsers(std::set<std::string> & _return, const int32_t seqid);
  void getChatHistory(std::vector<Message> & _return);
  int32_t send_getChatHistory();
  void recv_getChatHistory(std::vector<Message> & _return, const int32_t seqid);
  void getNewMessages(std::vector<Message> & _return, const int32_t userId);
  int32_t send_getNewMessages(const int32_t userId);
  void recv_getNewMessages(std::vector<Message> & _return, const int32_t seqid);
  void getNewPrivateMessages(std::vector<Message> & _return, const int32_t userId);
  int32_t send_getNewPrivateMessages(const int32_t userId);
  void recv_getNewPrivateMessages(std::vector<Message> & _return, const int32_t seqid);
  void addMessage(const Message& msg);
  int32_t send_addMessage(const Message& msg);
  void recv_addMessage(const int32_t seqid);
  void addPrivateMessage(const int32_t userId, const Message& msg);
  int32_t send_addPrivateMessage(const int32_t userId, const Message& msg);
  void recv_addPrivateMessage(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
