/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef raccoochat_TYPES_H
#define raccoochat_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace raccoochat {

class UserData;

class Message;

class InvalidNameException;

typedef struct _UserData__isset {
  _UserData__isset() : userName(false), userPassword(false), status(false), messagesId(false), privateMessagesId(false) {}
  bool userName :1;
  bool userPassword :1;
  bool status :1;
  bool messagesId :1;
  bool privateMessagesId :1;
} _UserData__isset;

class UserData : public virtual ::apache::thrift::TBase {
 public:

  UserData(const UserData&);
  UserData& operator=(const UserData&);
  UserData() : userName(), userPassword(), status(0), messagesId(0), privateMessagesId(0) {
  }

  virtual ~UserData() throw();
  std::string userName;
  std::string userPassword;
  int32_t status;
  int32_t messagesId;
  int32_t privateMessagesId;

  _UserData__isset __isset;

  void __set_userName(const std::string& val);

  void __set_userPassword(const std::string& val);

  void __set_status(const int32_t val);

  void __set_messagesId(const int32_t val);

  void __set_privateMessagesId(const int32_t val);

  bool operator == (const UserData & rhs) const
  {
    if (!(userName == rhs.userName))
      return false;
    if (!(userPassword == rhs.userPassword))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(messagesId == rhs.messagesId))
      return false;
    if (!(privateMessagesId == rhs.privateMessagesId))
      return false;
    return true;
  }
  bool operator != (const UserData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UserData &a, UserData &b);

inline std::ostream& operator<<(std::ostream& out, const UserData& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Message__isset {
  _Message__isset() : sendingTime(false), userId(false), textMessage(false) {}
  bool sendingTime :1;
  bool userId :1;
  bool textMessage :1;
} _Message__isset;

class Message : public virtual ::apache::thrift::TBase {
 public:

  Message(const Message&);
  Message& operator=(const Message&);
  Message() : sendingTime(), userId(0), textMessage() {
  }

  virtual ~Message() throw();
  std::string sendingTime;
  int32_t userId;
  std::string textMessage;

  _Message__isset __isset;

  void __set_sendingTime(const std::string& val);

  void __set_userId(const int32_t val);

  void __set_textMessage(const std::string& val);

  bool operator == (const Message & rhs) const
  {
    if (!(sendingTime == rhs.sendingTime))
      return false;
    if (!(userId == rhs.userId))
      return false;
    if (!(textMessage == rhs.textMessage))
      return false;
    return true;
  }
  bool operator != (const Message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Message &a, Message &b);

inline std::ostream& operator<<(std::ostream& out, const Message& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _InvalidNameException__isset {
  _InvalidNameException__isset() : errorCode(false), errorMessage(false) {}
  bool errorCode :1;
  bool errorMessage :1;
} _InvalidNameException__isset;

class InvalidNameException : public ::apache::thrift::TException {
 public:

  InvalidNameException(const InvalidNameException&);
  InvalidNameException& operator=(const InvalidNameException&);
  InvalidNameException() : errorCode(0), errorMessage() {
  }

  virtual ~InvalidNameException() throw();
  int32_t errorCode;
  std::string errorMessage;

  _InvalidNameException__isset __isset;

  void __set_errorCode(const int32_t val);

  void __set_errorMessage(const std::string& val);

  bool operator == (const InvalidNameException & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(errorMessage == rhs.errorMessage))
      return false;
    return true;
  }
  bool operator != (const InvalidNameException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidNameException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidNameException &a, InvalidNameException &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidNameException& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
